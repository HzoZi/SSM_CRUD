<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 设置业务逻辑层的包扫描器。目的是在指定的路径下，使用@Service注解的类。-->
    <context:component-scan base-package="com.cainiao.crud">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- spring的配置文件 这里主要配置和业务逻辑有关的配置-->
    <!-- 数据源 事务控制 -->
    <!-- 读取jdbc.properties属性文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>

    <!-- 创建数据源 数据库连接池 -->
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置和Mybatis的整合 创建SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="pooledDataSource"/>
        <!-- 配置MyBatis的核心配置文件,指定放置的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 指定mybatis.mapper 文件的位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
<!--        &lt;!&ndash; 配置实体类 &ndash;&gt;
        <property name="typeAliasesPackage" value="com.company.pojo"/>-->
    </bean>

    <!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有的dao接口的实现，加入到ioc容器中-->
        <property name="basePackage" value="com.cainiao.crud.dao"/>
    </bean>

    <!-- 配置一个可以执行批量的 sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!-- 设置事务的管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制住数据源 -->
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>
    <!-- 开启基于注解的事务，使用xml配置形式的事务（比较主要的都是使用配置式）-->
    <aop:config>
        <!-- 任意的返回值，service包及其子包下的所有类 的所有方法 的任意多个参数 -->
        <aop:pointcut id="txPoint" expression="execution(* com.cainiao.crud.service..*(..))"/>
        <!-- 配置事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!-- 添加事务的切面 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
<!--            &lt;!&ndash; 对数据进行查询的时候 将其设置为只读 &ndash;&gt;
            <tx:method name="*select*" read-only="true"/>
            <tx:method name="*find*" read-only="true"/>
            <tx:method name="*get*" read-only="true"/>
            <tx:method name="*search*" read-only="true"/>
            &lt;!&ndash; 对于修改的方法 必须添加事务 &ndash;&gt;
            <tx:method name="*insert*" propagation="REQUIRED"/>
            <tx:method name="*save*" propagation="REQUIRED"/>
            <tx:method name="*add*" propagation="REQUIRED"/>
            <tx:method name="*delete*" propagation="REQUIRED"/>
            <tx:method name="*remove*" propagation="REQUIRED"/>
            <tx:method name="*clear*" propagation="REQUIRED"/>
            <tx:method name="*update*" propagation="REQUIRED"/>
            <tx:method name="*modify*" propagation="REQUIRED"/>
            <tx:method name="*change*" propagation="REQUIRED"/>
            <tx:method name="*set*" propagation="REQUIRED"/>
            &lt;!&ndash; 对于其他未与上面的匹配的方法，支持事务即可&ndash;&gt;
            &lt;!&ndash; SUPPORTS：支持当前事务，如果没有事务，就以非事务方式执行 &ndash;&gt;
            <tx:method name="*" propagation="SUPPORTS"/>-->

            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!-- 以get开始的所有方法 都设置为只读 -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- Spring配置文件的核心点（数据源，与mybatis的整合，事务控制）-->

</beans>